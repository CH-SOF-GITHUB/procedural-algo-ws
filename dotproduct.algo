//Objective
// Name: Dot product
// Description: 
/* Write a procedure, called dot_product which calculates in the variable ps, the dot(scalar) product of v1 and v2 
(v1 and v2 are vectors of IR).*/
/* Write an algorithm which determines, for n pairs of given vectors, whether two vectors of given IR are orthogonal, 
   by calling the procedure defined in the previous question. The dot product of two orthogonal vectors is zero.*/
// Modify the previous algorithm if you use a dot_product function instead of a procedure.

PROCEDURE dot_product(var v1,v2:ARRAY_OF INTEGER, dot:INTEGER)
VAR
    i,n,m:INTEGER;  
BEGIN
    n:=length(v1);
    m:=length(v2);
    dot:=0;
    // Read the elements of v1
    FOR i FROM 0 TO n-1 STEP 1  DO
        Read(v1[i]);
    END_FOR
    //Read the elements of v2
    FOR i FROM 0 TO m-1 STEP 1  DO
        Read(v2[i]);
    END_FOR
    // Test length of vectors
    IF (n <> m) THEN
        Write('vectors does not have the same length')
    
    // the dot(scalar) product of v1 and v2 (v1 and v2 are vectors of IR).
    END_FOR
    FOR i FROM 1 TO n-1 DO 
        dot:= dot + v1[i] * v2[i];
    END_FOR
    Write(' produit scalaire of ',v1,' and ',v2,' egal ', dot);
    END_IF
END

// Modify the previous algorithm if you use a dot_product function instead of a procedure.
FUNCTION dot_product(v1, v2:ARRAY_OF INTEGER) : INTEGER
VAR
    i,j,n,m,dot:INTEGER;

BEGIN
    IF (n <> m) THEN
        Write('vectors does not have the same length')
    ELSE
        FOR i FROM 0 TO n STEP 1  DO
            dot:= dot + v1[i] * v2[i]; 
        END_FOR
        write("dot product of ",v1,v2,"egal",dot)
    END_IF
    RETURN dot;
END

ALGORITHM orthogonal
VAR
    vv1, vv2: ARRAY_OF INTEGER[1000][1000];
    i,j,n,m:INTEGER;
    test:BOOLEAN:=FALSE;

BEGIN
    n:=length(vv1);
    m:=length(vv2);
    test:= ps == 0;
    IF (n <> m) THEN
    test:=FALSE;
        Write('The two vectos does not have yhe same length')
    ELSE
    FOR i FROM 0 TO n-1 STEP 1  DO
        FOR j FROM 0 TO m-1 STEP 1  DO
            ps := dot_product(vv1[i], vv2[j])
            test:=TRUE;
            BREAK;
        END_FOR
    END_FOR
    Write(vv1[i],vv2[j],' sont orthogonaux ');
    END_IF
END


